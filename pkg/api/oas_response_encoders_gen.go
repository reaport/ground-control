// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

func encodeAirplaneGetParkingSpotResponse(response AirplaneGetParkingSpotRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AirplaneGetParkingSpotOK:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *AirplaneGetParkingSpotBadRequest:
		w.WriteHeader(400)
		span.SetStatus(codes.Error, http.StatusText(400))

		return nil

	case *AirplaneGetParkingSpotForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeAirplaneIDServiceTypeGetResponse(response AirplaneIDServiceTypeGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *AirplaneIDServiceTypeGetOK:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *AirplaneIDServiceTypeGetBadRequest:
		w.WriteHeader(400)
		span.SetStatus(codes.Error, http.StatusText(400))

		return nil

	case *AirplaneIDServiceTypeGetForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeMapAddEdgeResponse(response MapAddEdgeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MapAddEdgeCreated:
		w.WriteHeader(201)
		span.SetStatus(codes.Ok, http.StatusText(201))

		return nil

	case *MapAddEdgeBadRequest:
		w.WriteHeader(400)
		span.SetStatus(codes.Error, http.StatusText(400))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeMapAddNodeResponse(response MapAddNodeRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MapAddNodeCreated:
		w.WriteHeader(201)
		span.SetStatus(codes.Ok, http.StatusText(201))

		return nil

	case *MapAddNodeBadRequest:
		w.WriteHeader(400)
		span.SetStatus(codes.Error, http.StatusText(400))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeMapGetAirportMapResponse(response *AirportMap, w http.ResponseWriter, span trace.Span) error {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))

	e := new(jx.Encoder)
	response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}

func encodeMovingGetRouteResponse(response MovingGetRouteRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MovingGetRouteOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *MovingGetRouteNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeMovingNotifyArrivalResponse(response MovingNotifyArrivalRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MovingNotifyArrivalOK:
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		return nil

	case *MovingNotifyArrivalBadRequest:
		w.WriteHeader(400)
		span.SetStatus(codes.Error, http.StatusText(400))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeMovingRegisterVehicleResponse(response MovingRegisterVehicleRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MovingRegisterVehicleOK:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *MovingRegisterVehicleBadRequest:
		w.WriteHeader(400)
		span.SetStatus(codes.Error, http.StatusText(400))

		return nil

	case *MovingRegisterVehicleForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeMovingRequestMoveResponse(response MovingRequestMoveRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *MovingRequestMoveOK:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *MovingRequestMoveBadRequest:
		w.WriteHeader(400)
		span.SetStatus(codes.Error, http.StatusText(400))

		return nil

	case *MovingRequestMoveForbidden:
		w.WriteHeader(403)
		span.SetStatus(codes.Error, http.StatusText(403))

		return nil

	case *MovingRequestMoveNotFound:
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		return nil

	case *MovingRequestMoveConflict:
		w.WriteHeader(409)
		span.SetStatus(codes.Error, http.StatusText(409))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
